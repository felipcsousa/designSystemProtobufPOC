// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: progress_indicator.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializeprogressIndicatorDTO")
public inline fun progressIndicatorDTO(block: ProgressIndicatorDTOKt.Dsl.() -> kotlin.Unit): ProgressIndicator.ProgressIndicatorDTO =
  ProgressIndicatorDTOKt.Dsl._create(ProgressIndicator.ProgressIndicatorDTO.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ProgressIndicatorDTO`
 */
public object ProgressIndicatorDTOKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ProgressIndicator.ProgressIndicatorDTO.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ProgressIndicator.ProgressIndicatorDTO.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ProgressIndicator.ProgressIndicatorDTO = _builder.build()

    /**
     * ```
     * Progresso em porcentagem
     * ```
     *
     * `float percentage = 1;`
     */
    public var percentage: kotlin.Float
      @JvmName("getPercentage")
      get() = _builder.percentage
      @JvmName("setPercentage")
      set(value) {
        _builder.percentage = value
      }
    /**
     * ```
     * Progresso em porcentagem
     * ```
     *
     * `float percentage = 1;`
     */
    public fun clearPercentage() {
      _builder.clearPercentage()
    }

    /**
     * ```
     * Texto do label superior
     * ```
     *
     * `string labelTop = 2;`
     */
    public var labelTop: kotlin.String
      @JvmName("getLabelTop")
      get() = _builder.labelTop
      @JvmName("setLabelTop")
      set(value) {
        _builder.labelTop = value
      }
    /**
     * ```
     * Texto do label superior
     * ```
     *
     * `string labelTop = 2;`
     */
    public fun clearLabelTop() {
      _builder.clearLabelTop()
    }

    /**
     * ```
     * Valor associado ao label superior
     * ```
     *
     * `string valueTop = 3;`
     */
    public var valueTop: kotlin.String
      @JvmName("getValueTop")
      get() = _builder.valueTop
      @JvmName("setValueTop")
      set(value) {
        _builder.valueTop = value
      }
    /**
     * ```
     * Valor associado ao label superior
     * ```
     *
     * `string valueTop = 3;`
     */
    public fun clearValueTop() {
      _builder.clearValueTop()
    }

    /**
     * ```
     * Texto do label inferior esquerdo
     * ```
     *
     * `string labelBottomLeft = 4;`
     */
    public var labelBottomLeft: kotlin.String
      @JvmName("getLabelBottomLeft")
      get() = _builder.labelBottomLeft
      @JvmName("setLabelBottomLeft")
      set(value) {
        _builder.labelBottomLeft = value
      }
    /**
     * ```
     * Texto do label inferior esquerdo
     * ```
     *
     * `string labelBottomLeft = 4;`
     */
    public fun clearLabelBottomLeft() {
      _builder.clearLabelBottomLeft()
    }

    /**
     * ```
     * Valor associado ao label inferior esquerdo
     * ```
     *
     * `string valueBottomLeft = 5;`
     */
    public var valueBottomLeft: kotlin.String
      @JvmName("getValueBottomLeft")
      get() = _builder.valueBottomLeft
      @JvmName("setValueBottomLeft")
      set(value) {
        _builder.valueBottomLeft = value
      }
    /**
     * ```
     * Valor associado ao label inferior esquerdo
     * ```
     *
     * `string valueBottomLeft = 5;`
     */
    public fun clearValueBottomLeft() {
      _builder.clearValueBottomLeft()
    }

    /**
     * ```
     * Texto do label inferior direito
     * ```
     *
     * `string labelBottomRight = 6;`
     */
    public var labelBottomRight: kotlin.String
      @JvmName("getLabelBottomRight")
      get() = _builder.labelBottomRight
      @JvmName("setLabelBottomRight")
      set(value) {
        _builder.labelBottomRight = value
      }
    /**
     * ```
     * Texto do label inferior direito
     * ```
     *
     * `string labelBottomRight = 6;`
     */
    public fun clearLabelBottomRight() {
      _builder.clearLabelBottomRight()
    }

    /**
     * ```
     * Valor associado ao label inferior direito
     * ```
     *
     * `string valueBottomRight = 7;`
     */
    public var valueBottomRight: kotlin.String
      @JvmName("getValueBottomRight")
      get() = _builder.valueBottomRight
      @JvmName("setValueBottomRight")
      set(value) {
        _builder.valueBottomRight = value
      }
    /**
     * ```
     * Valor associado ao label inferior direito
     * ```
     *
     * `string valueBottomRight = 7;`
     */
    public fun clearValueBottomRight() {
      _builder.clearValueBottomRight()
    }

    /**
     * ```
     * Token spacing_sm no topo
     * ```
     *
     * `bool spacingTop = 8;`
     */
    public var spacingTop: kotlin.Boolean
      @JvmName("getSpacingTop")
      get() = _builder.spacingTop
      @JvmName("setSpacingTop")
      set(value) {
        _builder.spacingTop = value
      }
    /**
     * ```
     * Token spacing_sm no topo
     * ```
     *
     * `bool spacingTop = 8;`
     */
    public fun clearSpacingTop() {
      _builder.clearSpacingTop()
    }

    /**
     * ```
     * Token spacing_sm na base
     * ```
     *
     * `bool spacingBottom = 9;`
     */
    public var spacingBottom: kotlin.Boolean
      @JvmName("getSpacingBottom")
      get() = _builder.spacingBottom
      @JvmName("setSpacingBottom")
      set(value) {
        _builder.spacingBottom = value
      }
    /**
     * ```
     * Token spacing_sm na base
     * ```
     *
     * `bool spacingBottom = 9;`
     */
    public fun clearSpacingBottom() {
      _builder.clearSpacingBottom()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ProgressIndicator.ProgressIndicatorDTO.copy(block: ProgressIndicatorDTOKt.Dsl.() -> kotlin.Unit): ProgressIndicator.ProgressIndicatorDTO =
  ProgressIndicatorDTOKt.Dsl._create(this.toBuilder()).apply { block() }._build()

