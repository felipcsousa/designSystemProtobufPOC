// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: progress_indicator.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ProgressIndicatorDTO: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Progresso em porcentagem
  var percentage: Float = 0

  /// Texto do label superior
  var labelTop: String = String()

  /// Valor associado ao label superior
  var valueTop: String = String()

  /// Texto do label inferior esquerdo
  var labelBottomLeft: String = String()

  /// Valor associado ao label inferior esquerdo
  var valueBottomLeft: String = String()

  /// Texto do label inferior direito
  var labelBottomRight: String = String()

  /// Valor associado ao label inferior direito
  var valueBottomRight: String = String()

  /// Token spacing_sm no topo
  var spacingTop: Bool = false

  /// Token spacing_sm na base
  var spacingBottom: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProgressIndicatorDTO: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProgressIndicatorDTO"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "percentage"),
    2: .same(proto: "labelTop"),
    3: .same(proto: "valueTop"),
    4: .same(proto: "labelBottomLeft"),
    5: .same(proto: "valueBottomLeft"),
    6: .same(proto: "labelBottomRight"),
    7: .same(proto: "valueBottomRight"),
    8: .same(proto: "spacingTop"),
    9: .same(proto: "spacingBottom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.percentage) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.labelTop) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valueTop) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.labelBottomLeft) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.valueBottomLeft) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.labelBottomRight) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.valueBottomRight) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.spacingTop) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.spacingBottom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.percentage.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.percentage, fieldNumber: 1)
    }
    if !self.labelTop.isEmpty {
      try visitor.visitSingularStringField(value: self.labelTop, fieldNumber: 2)
    }
    if !self.valueTop.isEmpty {
      try visitor.visitSingularStringField(value: self.valueTop, fieldNumber: 3)
    }
    if !self.labelBottomLeft.isEmpty {
      try visitor.visitSingularStringField(value: self.labelBottomLeft, fieldNumber: 4)
    }
    if !self.valueBottomLeft.isEmpty {
      try visitor.visitSingularStringField(value: self.valueBottomLeft, fieldNumber: 5)
    }
    if !self.labelBottomRight.isEmpty {
      try visitor.visitSingularStringField(value: self.labelBottomRight, fieldNumber: 6)
    }
    if !self.valueBottomRight.isEmpty {
      try visitor.visitSingularStringField(value: self.valueBottomRight, fieldNumber: 7)
    }
    if self.spacingTop != false {
      try visitor.visitSingularBoolField(value: self.spacingTop, fieldNumber: 8)
    }
    if self.spacingBottom != false {
      try visitor.visitSingularBoolField(value: self.spacingBottom, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProgressIndicatorDTO, rhs: ProgressIndicatorDTO) -> Bool {
    if lhs.percentage != rhs.percentage {return false}
    if lhs.labelTop != rhs.labelTop {return false}
    if lhs.valueTop != rhs.valueTop {return false}
    if lhs.labelBottomLeft != rhs.labelBottomLeft {return false}
    if lhs.valueBottomLeft != rhs.valueBottomLeft {return false}
    if lhs.labelBottomRight != rhs.labelBottomRight {return false}
    if lhs.valueBottomRight != rhs.valueBottomRight {return false}
    if lhs.spacingTop != rhs.spacingTop {return false}
    if lhs.spacingBottom != rhs.spacingBottom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
